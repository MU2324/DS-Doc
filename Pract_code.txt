-------R Language------


"Pract 4 Hypothesist Testing"
"T-test"
test1<-c(20,30,50,40,30,20,50,40,30)
test2<-c(30,40,60,50,40,30,60,50,40)
t.test(test1,test2,alternative = "two.sided" , var.equal=FALSE)


test1<-c(30,40,60,50,40,30,60,50,40)
test2<-c(20,30,50,40,30,20,50,40,30)
t.test(test1,test2,alternative = "two.sided" , var.equal = FALSE)


"Chi-square test and T-test"
library(MASS)
survey
sample<-data.frame(survey$Smoke,survey$Exer)
sample
Stable<-table(survey$Smoke,survey$Exer)
Stable
result<-chisq.test(Stable)
result
resultT<-t.test(Stable)
resultT



"Pract 5 AOV"
data<-read.csv("E:\\Datasets\\Political_Interest.csv")
attach(data)
boxplot(PoliticalInterest~Gender)
result = aov(PoliticalInterest~Gender)
summary(result)
boxplot(PoliticalInterest~Gender+EconomicalCondition)
result = aov(PoliticalInterest~Gender+EconomicalCondition)
summary(result)



"Pract 8 KMEANS"

data(iris)
str(iris)
install.packages("ClusterR")
install.packages("cluster")

library(ClusterR)
library(cluster)
iris_1 <-iris[,-5]
set.seed(240)
kmeans.re<-kmeans(iris_1,centers = 3,nstart = 20)
kmeans.re
kmeans.re$cluster
cm<-table(iris$Species,kmeans.re$cluster)
cm
plot(iris_1[c("Sepal.Length","Sepal.Width")])
plot(iris_1[c("Sepal.Length","Sepal.Width")]
     ,col =kmeans.re$cluster)
plot(iris_1[c("Sepal.Length","Sepal.Width")],
     col = kmeans.re$cluster,
     main = "K-means with 3 clusters")

kmeans.re$centers
kmeans.re$centers[,c("Sepal.Length","Sepal.Width")]

points(kmeans.re$centers[,c("Sepal.Length", "Sepal.Width")],
       col = 1.3, pch = 8,cex = 3)
y_kmeans<-kmeans.re$cluster
clusplot(iris_1[,c("Sepal.Length","Sepal.Width")],
         y_kmeans,
         lines = 0,
         shade = TRUE,
         color = TRUE,
         labels = 2,
         plotchar = FALSE,
         span = TRUE,
         main = paste("Cluster iris"),
         xlab = "Sepal.Length",
         ylab = "Sepal.Width")


"PCA  Pract 9"

iris
data<-iris[1:4]
data
pc <-princomp(data,cor = TRUE,scores = TRUE)
pc
summary(pc)
plot(pc)
plot(pc,type='l')
biplot(pc)



--------In Collab--------

"Pract 9 Kmeans"

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from sklearn.datasets import load_iris
from sklearn.cluster import KMeans

X, y = load_iris(return_X_y=True)

sse = []
for k in range(1,11):
  km = KMeans(n_clusters=k, random_state=2)
  km.fit(X)
  sse.append(km.inertia_)

sns.set_style("whitegrid")
g=sns.lineplot(x=range(1,11),y=sse)

g.set(xlabel = "Number of cluster (k)",
      ylabel = "Sum Squared Error",
      title = 'Elbow Method')

plt.show()

kmeans = KMeans(n_clusters=3, random_state=2)
kmeans.fit(X)

print(kmeans.cluster_centers_)

pred = kmeans.fit_predict(X)
print(pred)

plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.scatter(X[:,0],X[:,1],c=pred,cmap=cm.Accent)
plt.grid(True)
for center in kmeans.cluster_centers_:
  center = center[:2]
plt.scatter(center[0],center[1],marker = '^',c= 'red')
plt.xlabel("petal length(cm)")
plt.ylabel("petal width(cm)")

plt.subplot(1,2,2)
plt.scatter(X[:,2],X[:,3],c=pred,cmap=cm.Accent)
plt.grid(True)
for center in kmeans.cluster_centers_:
  center = center[2:4]
  plt.scatter(center[0],center[1],marker = '^',c='red')
plt.xlabel("sepal length(cm)")
plt.ylabel("sepal width(cm)")

plt.show()

print("End......")


"Pract 6"

"Simple Regression"

import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

x= np.array([26,28,32,35,39]).reshape((-1,1))
y= np.array([123,245,296,389,435])
print(x)
print(y)

model = LinearRegression()
model.fit(x,y)

y_pred=model.predict(x)
print(y_pred)

y_new = model.predict(x)
y_new
x_new = np.array([40]).reshape((-1,1))
y_new = model.predict(x_new)
y_new
plt.scatter(x,y)
plt.plot(x,y_pred)
plt.show



"Multiple Regression"

import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

X= np.array([[26,3],
             [28,4],
             [32,3.5],
             [35,5],
             [39,6]])

y = np.array([123,245,296,389,435])

model = LinearRegression()
model.fit(X,y)

y_pred = model.predict(X)

plt.scatter(y,y_pred)
plt.plot([y.min(),y.max()], [y.min(),y.max()], 'k--', lw=2)

plt.xlabel("True Values")
plt.ylabel("Predictions")
plt.title("True vs Predicted Values")
plt.show()


